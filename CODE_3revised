# Alternative way to install packages with error handling
install_if_needed <- function(package) {
  if (!require(package, character.only = TRUE, quietly = TRUE)) {
    # Try with default repository
    tryCatch({
      install.packages(package, repos = "https://cloud.r-project.org/")
      library(package, character.only = TRUE)
      cat(paste("Package", package, "successfully installed and loaded.\n"))
    }, error = function(e) {
      message(paste("Could not install package", package, ": ", e$message, 
                    "\nYou may need to install it manually."))
    })
  } else {
    cat(paste("Package", package, "is already installed and loaded.\n"))
  }
}

# Try to install and load required packages
install_if_needed("ggplot2")
install_if_needed("dplyr")
install_if_needed("readxl")
install_if_needed("tidyr")
install_if_needed("gridExtra")

# Check if all packages were successfully loaded
required_packages <- c("ggplot2", "dplyr", "readxl", "tidyr", "gridExtra")
missing_packages <- required_packages[!sapply(required_packages, requireNamespace, quietly = TRUE)]

if (length(missing_packages) > 0) {
  stop(paste("Please manually install these packages before continuing:", 
             paste(missing_packages, collapse = ", ")))
}

# Read the Excel file
file_path <- "n1_HighCD31andLowCD31_Tumor.xlsx"

# Try to read data with error handling
tryCatch({
  # Read data from Excel
  cd31_data <- readxl::read_excel(file_path)
  
  # Check if the file was properly read
  if (ncol(cd31_data) < 2) {
    stop("File doesn't have at least 2 columns")
  }
  
  # Print the structure to verify the data
  cat("Data structure:\n")
  print(str(cd31_data))
  
  # Attempt to identify and rename columns if needed
  if (!all(c("High CD31", "Low CD31") %in% names(cd31_data))) {
    # If columns don't have expected names, assume first two columns
    if (ncol(cd31_data) >= 2) {
      old_names <- names(cd31_data)
      names(cd31_data)[1:2] <- c("High CD31", "Low CD31")
      cat(paste("Renamed columns from", paste(old_names[1:2], collapse=", "), 
                "to 'High CD31', 'Low CD31'\n"))
    }
  }
  
  # Convert data from wide to long format for ggplot
  cd31_long <- cd31_data %>%
    tidyr::pivot_longer(
      cols = c(1:2),  # Use column positions to be safe
      names_to = "Group", 
      values_to = "Value"
    ) %>%
    # Remove NA values that might exist in the Excel file
    dplyr::filter(!is.na(Value))
  
  # Calculate statistics for annotations
  stats <- cd31_long %>%
    dplyr::group_by(Group) %>%
    dplyr::summarize(
      Median = median(Value, na.rm = TRUE),
      Mean = mean(Value, na.rm = TRUE),
      Q1 = quantile(Value, 0.25, na.rm = TRUE),
      Q3 = quantile(Value, 0.75, na.rm = TRUE),
      Min = min(Value, na.rm = TRUE),
      Max = max(Value, na.rm = TRUE),
      N = dplyr::n(),
      .groups = 'drop'
    )
  
  # Print statistics to console
  cat("Summary statistics:\n")
  print(stats)
  
  # Calculate p-value for t-test between groups
  if (length(unique(cd31_long$Group)) == 2) {
    t_test_result <- stats::t.test(
      Value ~ Group, 
      data = cd31_long,
      alternative = "two.sided",
      var.equal = FALSE  # Welch's t-test (doesn't assume equal variances)
    )
    
    p_value <- t_test_result$p.value
    p_value_text <- if(p_value < 0.001) "p < 0.001" else paste("p =", round(p_value, 3))
    
    cat("T-test results:\n")
    print(t_test_result)
  } else {
    p_value_text <- "Cannot perform t-test (need exactly 2 groups)"
    cat(p_value_text, "\n")
  }
  
  # Define custom color palette for CD31 groups
  cd31_colors <- setNames(c("#3498db", "#e74c3c"), unique(cd31_long$Group))
  
  # Create the fancy boxplot
  p <- ggplot2::ggplot(cd31_long, ggplot2::aes(x = Group, y = Value, fill = Group)) +
    # Add the boxplot with notch
    ggplot2::geom_boxplot(
      notch = TRUE,
      width = 0.6,
      alpha = 0.8,
      outlier.size = 4,
      outlier.alpha = 0.6
    ) +
    # Add individual data points with jitter
    ggplot2::geom_jitter(
      width = 0.15,
      alpha = 0.4,
      size = 2
    ) +
    # Add median annotations
    ggplot2::geom_text(
      data = stats,
      ggplot2::aes(x = Group, y = Median, label = paste("Median:", round(Median, 2))),
      vjust = -1.5,
      fontface = "bold",
      size = 4
    ) +
    # Add mean annotations
    ggplot2::geom_text(
      data = stats,
      ggplot2::aes(x = Group, y = Mean, label = paste("Mean:", round(Mean, 2))),
      vjust = 2.5,
      fontface = "bold",
      size = 4
    ) +
    # Add sample size annotations
    ggplot2::geom_text(
      data = stats,
      ggplot2::aes(x = Group, y = Min, label = paste("n =", N)),
      vjust = 2,
      fontface = "bold",
      size = 3.5
    ) +
    # Add p-value annotation
    ggplot2::annotate("text", 
             x = 1.5, 
             y = max(cd31_long$Value, na.rm = TRUE) * 1.1,
             label = p_value_text,
             fontface = "bold", 
             size = 5) +
    # Set a custom theme and style
    ggplot2::theme_light() +
    ggplot2::theme(
      text = ggplot2::element_text(family = "serif"),
      plot.title = ggplot2::element_text(size = 18, face = "bold", hjust = 0.5, 
                                margin = ggplot2::margin(b = 20)),
      axis.title = ggplot2::element_text(size = 14, face = "bold"),
      axis.title.x = ggplot2::element_blank(),  # Remove x-axis label since group names are clear
      axis.text = ggplot2::element_text(size = 12),
      axis.text.x = ggplot2::element_text(face = "bold"),
      legend.position = "none",  # Remove legend as colors are self-explanatory
      panel.grid.major.x = ggplot2::element_blank(),
      panel.grid.minor = ggplot2::element_blank(),
      panel.grid.major.y = ggplot2::element_line(linetype = "dashed", color = "gray70")
    ) +
    # Add titles and labels
    ggplot2::labs(
      title = "Comparison of CD31 Expression Levels",
      y = "CD31 Values",
      caption = "Box: Interquartile range (IQR, 25%-75%)\nWhiskers: Range of data excluding outliers\nNotch: 95% confidence interval around median"
    ) +
    # Use the custom color palette
    ggplot2::scale_fill_manual(values = cd31_colors)
  
  # Print the plot
  print(p)
  
  # Save the plot to a file with error handling
  tryCatch({
    ggplot2::ggsave("CD31_boxplot.png", p, width = 10, height = 8, dpi = 300)
    cat("Plot saved to CD31_boxplot.png\n")
  }, error = function(e) {
    message("Could not save the plot: ", e$message)
  })
  
  # Create summary table
  summary_table <- stats %>%
    dplyr::mutate(
      SD = sapply(Group, function(g) sd(cd31_long$Value[cd31_long$Group == g], na.rm = TRUE)),
      `Mean ± SD` = paste0(round(Mean, 2), " ± ", round(SD, 2)),
      `Median (IQR)` = paste0(round(Median, 2), " (", round(Q1, 2), "-", round(Q3, 2), ")"),
      `Range` = paste0(round(Min, 2), " - ", round(Max, 2))
    ) %>%
    dplyr::select(Group, N, `Mean ± SD`, `Median (IQR)`, `Range`)
  
  # Print the summary table
  cat("\nSummary Table:\n")
  print(summary_table)
  
}, error = function(e) {
  cat("Error in data processing:", e$message, "\n")
  
  # Provide troubleshooting advice
  cat("\nTroubleshooting tips:\n")
  cat("1. Make sure the Excel file 'n1_HighCD31andLowCD31_Tumor.xlsx' exists in your working directory\n")
  cat("2. Check that you have read/write permissions for this directory\n")
  cat("3. Verify that the Excel file contains the expected data\n")
  cat("4. If installing packages fails, try changing your CRAN mirror in RStudio:\n")
  cat("   Tools > Global Options > Packages > Change repository\n")
})
